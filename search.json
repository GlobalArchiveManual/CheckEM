[{"path":[]},{"path":[]},{"path":[]},{"path":"https://globalarchivemanual.github.io/CheckEM/articles/r-workflows/check-fish.html","id":"load-maxn-data--","dir":"Articles > R-workflows","previous_headings":"","what":"3. Load MaxN data —-","title":"Checking fish data exported from EventMeasure","text":"points <- list.files(path = “r-workflows/data/raw/”, # replaces ga.list.files recursive = T, pattern = “_Points.txt”, full.names = T) %>% # list files ending “_Points.txt” purrr::map(~CheckEM::read_files_txt(.)) %>% # function reads text files identified , combines one dataframe, creates campaignid column filename purrr::list_rbind() %>% glimpse() maxn <- points %>% dplyr::group_by(campaignid, sample, filename, periodtime, frame, family, genus, species) %>% # Add stage like create MaxN stage dplyr::mutate(number = .numeric(number)) %>% dplyr::summarise(maxn = sum(number)) %>% dplyr::group_by(campaignid, sample, family, genus, species) %>% dplyr::slice(.max(maxn)) %>% dplyr::ungroup() %>% dplyr::filter(!.na(maxn)) %>% dplyr::select(-frame) %>% tidyr::replace_na(list(maxn = 0)) %>% dplyr::mutate(maxn = .numeric(maxn)) %>% dplyr::filter(maxn > 0) %>% dplyr::inner_join(metadata) %>% dplyr::filter(successful_count %% c(“Yes”)) %>% # Remove samples marked metadata successful count dplyr::filter(maxn > 0) %>% glimpse()","code":""},{"path":"https://globalarchivemanual.github.io/CheckEM/articles/r-workflows/check-fish.html","id":"load-length-3d-point-data--","dir":"Articles > R-workflows","previous_headings":"","what":"4. Load length & 3D point data —-","title":"Checking fish data exported from EventMeasure","text":"length3dpoints <- list.files(path = “r-workflows/data/raw/”, recursive = T, pattern = “_3DPoints.txt|_Lengths.txt”, full.names = T) %>% purrr::map(~CheckEM::read_files_txt(.)) %>% purrr::list_rbind() %>% dplyr::select(-c(comment))%>% # take comment also comment column metadata dplyr::inner_join(metadata)%>% dplyr::filter(successful_length %% “Yes”) %>% # Remove samples marked metadata successful length measurements glimpse()","code":""},{"path":"https://globalarchivemanual.github.io/CheckEM/articles/r-workflows/check-fish.html","id":"complete-and-tidy-datasets-run-data-checks","dir":"Articles > R-workflows","previous_headings":"","what":"5. Complete and tidy datasets, run data checks","title":"Checking fish data exported from EventMeasure","text":"dat <- maxn %>% dplyr::select(campaignid, sample, family, genus, species, maxn) %>% tidyr::complete(nesting(campaignid, sample), nesting(family, genus, species)) %>% replace_na(list(maxn = 0)) %>% group_by(sample, family, genus, species) %>% dplyr::summarise(maxn = sum(maxn)) %>% ungroup() %>% mutate(scientific = paste(family, genus, species, sep = ” “))%>% dplyr::select(sample, scientific, maxn)%>% spread(scientific, maxn, fill = 0)%>% glimpse() maxn.families <- maxn %>% dplyr::mutate(scientific = paste(family, genus, species, sep = ” “)) %>% filter(!(family %%”Unknown”)) %>% dplyr::select(c(family, genus, species, scientific)) %>% distinct() %>% glimpse() complete.maxn <- dat %>% pivot_longer(names_to = “scientific”, values_to = “maxn”, cols = 2:ncol(.)) %>% inner_join(maxn.families, = c(“scientific”)) %>% full_join(metadata)%>% glimpse() length.families <- length3dpoints %>% dplyr::filter(!(family %% “Unknown”)) %>% dplyr::select(family, genus, species)%>% distinct() %>% glimpse() complete.length.number <- length3dpoints %>% dplyr::filter(!family %% “Unknown”)%>% dplyr::right_join(metadata) %>% dplyr::filter(successful_length %% “Yes”) %>% dplyr::select(campaignid, sample, family, genus, species, length, number, range) %>% tidyr::complete(nesting(campaignid, sample), nesting(family, genus, species)) %>% dplyr::mutate(number = .numeric(number)) %>% replace_na(list(number = 0)) %>% # add zeros - case want calculate abundance species based length rule (e.g. greater legal size) ungroup() %>% dplyr::filter(!.na(number)) %>% # anything dplyr::mutate(length = .numeric(length)) %>% left_join(.,metadata) %>% tidyr::uncount(number) %>% glimpse()","code":""},{"path":"https://globalarchivemanual.github.io/CheckEM/articles/r-workflows/check-fish.html","id":"save-datasets--","dir":"Articles > R-workflows","previous_headings":"","what":"6. Save datasets —-","title":"Checking fish data exported from EventMeasure","text":"saveRDS(complete.maxn, file = paste0(“r-workflows/data/staging/”, name, “_Complete-maxn.rds”)) saveRDS(complete.length.number, file = paste0(“r-workflows/data/staging/”, name, “_Complete-length.rds”))","code":""},{"path":"https://globalarchivemanual.github.io/CheckEM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Brooke Gibbons. Author, maintainer. Claude Spencer. Author. Tim Langlois. Author. Todd Bond. Contributor. Jacquomo Monk. Contributor. Jordan Goetze. Contributor. . Funder. . Funder.","code":""},{"path":"https://globalarchivemanual.github.io/CheckEM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gibbons B, Spencer C, Langlois T (2023). CheckEM: R package Shiny App Formatting, Checking, Visualising Analysing Stereo-Video Annotation Data. R package version 0.0.0.9000, https://globalarchivemanual.github.io/CheckEM/.","code":"@Manual{,   title = {CheckEM: An R package and Shiny App for Formatting, Checking, Visualising and Analysing Stereo-Video Annotation Data},   author = {Brooke Gibbons and Claude Spencer and Tim Langlois},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://globalarchivemanual.github.io/CheckEM/}, }"},{"path":"https://globalarchivemanual.github.io/CheckEM/index.html","id":"checkem","dir":"","previous_headings":"","what":"An R package and Shiny App for Formatting, Checking, Visualising and Analysing Stereo-Video Annotation Data","title":"An R package and Shiny App for Formatting, Checking, Visualising and Analysing Stereo-Video Annotation Data","text":"CheckEM R package shiny app checking, visualizing analysing stereo-video annotation data. idea behind CheckEM provide fish benthic ecologists set tools quickly effectively quality control, format analyse data collected using stereo-video methods. provided: R workflows fish benthic annotation data sets using functions CheckEM. web based app hosted shinyapps.io enable users stereo-video aren’t familiar R quality control format annotations user guide CheckEM shiny app Annotation guides EventMeasure TransectMeasure. hope efforts standardise annotation QC stereo-video data result data meet FAIR principles interoperability reusability.","code":""},{"path":"https://globalarchivemanual.github.io/CheckEM/index.html","id":"to-install-in-r","dir":"","previous_headings":"","what":"To install in R","title":"An R package and Shiny App for Formatting, Checking, Visualising and Analysing Stereo-Video Annotation Data","text":"","code":"install.packages('devtools') library('devtools')  devtools::install_github(\"GlobalArchiveManual/CheckEM\") library(CheckEM)"},{"path":"https://globalarchivemanual.github.io/CheckEM/index.html","id":"checkem-is-available-as-a-shiny-app","dir":"","previous_headings":"","what":"CheckEM is available as a shiny app","title":"An R package and Shiny App for Formatting, Checking, Visualising and Analysing Stereo-Video Annotation Data","text":"CheckEM available web based app hosted shinyapps.io can accessed link can run local version CheckEM (without internet) using R via:","code":"CheckEM::runCheckEM()"},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/clean_names.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to standardise names in a dataframe — clean_names","title":"A function to standardise names in a dataframe — clean_names","text":"function standardise names dataframe","code":""},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/clean_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to standardise names in a dataframe — clean_names","text":"","code":"clean_names(dat)"},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/clean_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to standardise names in a dataframe — clean_names","text":"dat","code":""},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/clean_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to standardise names in a dataframe — clean_names","text":"dataframe lower case names, _ separators","code":""},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/has_special_characters.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to check if a string contains any special characters — has_special_characters","title":"Function to check if a string contains any special characters — has_special_characters","text":"Function check string contains special characters","code":""},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/has_special_characters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to check if a string contains any special characters — has_special_characters","text":"","code":"has_special_characters(string)"},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/has_special_characters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to check if a string contains any special characters — has_special_characters","text":"string","code":""},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/read_TM.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to read .txt exports from SeaGIS TransectMeasure — read_TM","title":"A function to read .txt exports from SeaGIS TransectMeasure — read_TM","text":"function read .txt exports SeaGIS TransectMeasure","code":""},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/read_TM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to read .txt exports from SeaGIS TransectMeasure — read_TM","text":"","code":"read_TM(dir, sample)"},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/read_TM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to read .txt exports from SeaGIS TransectMeasure — read_TM","text":"dir directory .txt files saved sample Either character value define sample recorded \"opcode\" \"period\"","code":""},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/read_TM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to read .txt exports from SeaGIS TransectMeasure — read_TM","text":"dataframe column campaignID sample","code":""},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/read_files_txt.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — read_files_txt","title":"Title — read_files_txt","text":"Title","code":""},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/read_files_txt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — read_files_txt","text":"","code":"read_files_txt(dir)"},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/read_files_txt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — read_files_txt","text":"flnm","code":""},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/read_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to read GlobalArchive format metadata — read_metadata","title":"A function to read GlobalArchive format metadata — read_metadata","text":"function read GlobalArchive format metadata","code":""},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/read_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to read GlobalArchive format metadata — read_metadata","text":"","code":"read_metadata(dir)"},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/read_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to read GlobalArchive format metadata — read_metadata","text":"dir directory .txt files saved","code":""},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/read_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to read GlobalArchive format metadata — read_metadata","text":"dataframe column campaignID sample","code":""},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/runCheckEM.html","id":null,"dir":"Reference","previous_headings":"","what":"Run CheckEM shiny app locally — runCheckEM","title":"Run CheckEM shiny app locally — runCheckEM","text":"Run CheckEM shiny app locally","code":""},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/runCheckEM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run CheckEM shiny app locally — runCheckEM","text":"","code":"runCheckEM()"},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/runCheckEM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run CheckEM shiny app locally — runCheckEM","text":"launch local version CheckEM browser","code":""},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/runCheckEM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run CheckEM shiny app locally — runCheckEM","text":"","code":"## Not run: if (FALSE) CheckEM::runCheckEM()"},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/standardize_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to standardize column names and types — standardize_tibble","title":"Function to standardize column names and types — standardize_tibble","text":"Function standardize column names types","code":""},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/standardize_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to standardize column names and types — standardize_tibble","text":"","code":"standardize_tibble(tibble)"},{"path":"https://globalarchivemanual.github.io/CheckEM/reference/standardize_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to standardize column names and types — standardize_tibble","text":"tibble","code":""}]
